from os import getenv
from datetime import timedelta
from flask import flash, Flask, redirect, render_template, request, session, url_for
from flask_pymongo import PyMongo
from werkzeug.exceptions import NotFound


app = Flask(__name__)
app.secret_key = bytes(getenv("PENTESTING_SECRET"), encoding="utf-8")
app.permanent_session_lifetime = timedelta(days=365)

app.config["MONGO_URI"] = "mongodb://localhost:27017/identidades"
mongo = PyMongo(app)


@app.route("/")
def index():
    news = mongo.db.news.find({})
    return render_template("index.html", context={"news": news})


@app.route("/news")
def news():
    if "user" not in session:
        return redirect(url_for("login"))
    article_id = int(request.args.get("id"))
    article = mongo.db.news.find_one({"article_id": article_id})
    return render_template("news.html", article=article)


@app.route("/register", methods=["GET", "POST"])
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        new_register = False
        user_data = request.form.to_dict()
        if request.path == "/register":
            new_register = mongo.db.users.insert_one(user_data)
        if request.path == "/login" or new_register.acknowledged:
            if mongo.db.users.find(user_data).count() > 0:
                session["user"] = True
                flash(f"Welcome, {user_data['name']}")
                return redirect(url_for("index"))
            if new_register:
                flash("ERROR: Something went wrong registering user")
            else:
                flash(f"ERROR: Invalid credentials. Please try again.")
    return render_template("form.html")


@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("index"))


if __name__ == "__main__":
    app.run()

